/**
 * @file gatt_enum_types_strings.cc
 * @copyright (c) 2018, natersoz. Distributed under the Apache 2.0 license.
 */

#include "gatt_enum_types_strings.h"


namespace ble
{
namespace gatt
{

char const* to_string(ble::gatt::attribute_type attribute_type)
{
    switch(attribute_type)
    {
    case attribute_type::primary_service:
        return "primary_service";
    case attribute_type::secondary_service:
        return "secondary_service";
    case attribute_type::include:
        return "include";
    case attribute_type::characteristic:
        return "characteristic";
    case attribute_type::characteristic_extended_properties:
        return "characteristic_extended_properties";
    case attribute_type::characteristic_user_description:
        return "characteristic_user_description";
    case attribute_type::cccd:
        return "cccd";
    case attribute_type::sccd:
        return "sccd";
    case attribute_type::cpfd:
        return "cpfd";
    case attribute_type::characteristic_aggregate_format:
        return "characteristic_aggregate_format";

    case attribute_type::undefined:
    default:
        break;
    }
    return "attribute_type undefined";
}

char const* to_string(ble::gatt::descriptor_type descriptor_type)
{
    switch (descriptor_type)
    {
    case descriptor_type::characteristic_extended_properties:
        return "characteristic_extended_properties";
    case descriptor_type::characteristic_user_description:
        return "characteristic_user_description";
    case descriptor_type::cccd:
        return "cccd";
    case descriptor_type::sccd:
        return "sccd";
    case descriptor_type::cpfd:
        return "cpfd";
    case descriptor_type::characteristic_aggregate_format:
        return "characteristic_aggregate_format";
    case descriptor_type::valid_range:
        return "valid_range";
    case descriptor_type::external_report_reference:
        return "external_report_reference";
    case descriptor_type::report_reference:
        return "report_reference";
    case descriptor_type::number_of_digitals:
        return "number_of_digitals";
    case descriptor_type::value_trigger_setting:
        return "value_trigger_setting";
    case descriptor_type::environmental_sensing_configuration:
        return "environmental_sensing_configuration";
    case descriptor_type::environmental_sensing_measurement:
        return "environmental_sensing_measurement";
    case descriptor_type::environmental_sensing_trigger_setting:
        return "environmental_sensing_trigger_setting";
    case descriptor_type::time_trigger_setting:
        return "time_trigger_setting";
    }
    return "descriptor_type undefined";
};

char const* to_string(ble::gatt::service_type service_type)
{
    switch (service_type)
    {
    case service_type::generic_access:
        return "generic_access";
    case service_type::generic_attribute:
        return "generic_attribute";
    case service_type::immediate_alert:
        return "immediate_alert";
    case service_type::link_loss:
        return "link_loss";
    case service_type::tx_power:
        return "tx_power";
    case service_type::current_time_service:
        return "current_time_service";
    case service_type::reference_time_update_service:
        return "reference_time_update_service";
    case service_type::next_dst_change_service:
        return "next_dst_change_service";
    case service_type::glucose:
        return "glucose";
    case service_type::health_thermometer:
        return "health_thermometer";
    case service_type::device_information:
        return "device_information";
    case service_type::heart_rate:
        return "heart_rate";
    case service_type::phone_alert_status_service:
        return "phone_alert_status_service";
    case service_type::battery_service:
        return "battery_service";
    case service_type::blood_pressure:
        return "blood_pressure";
    case service_type::alert_notification_service:
        return "alert_notification_service";
    case service_type::human_interface_device:
        return "human_interface_device";
    case service_type::scan_parameters:
        return "scan_parameters";
    case service_type::running_speed_and_cadence:
        return "running_speed_and_cadence";
    case service_type::automation_io:
        return "automation_io";
    case service_type::cycling_speed_and_cadence:
        return "cycling_speed_and_cadence";
    case service_type::cycling_power:
        return "cycling_power";
    case service_type::location_and_navigation:
        return "location_and_navigation";
    case service_type::environmental_sensing:
        return "environmental_sensing";
    case service_type::body_composition:
        return "body_composition";
    case service_type::user_data:
        return "user_data";
    case service_type::weight_scale:
        return "weight_scale";
    case service_type::bond_management_service:
        return "bond_management_service";
    case service_type::continuous_glucose_monitoring:
        return "continuous_glucose_monitoring";
    case service_type::internet_protocol_support_service:
        return "internet_protocol_support_service";
    case service_type::indoor_positioning:
        return "indoor_positioning";
    case service_type::pulse_oximeter_service:
        return "pulse_oximeter_service";
    case service_type::http_proxy:
        return "http_proxy";
    case service_type::transport_discovery:
        return "transport_discovery";
    case service_type::object_transfer_service:
        return "object_transfer_service";
    case service_type::fitness_machine:
        return "fitness_machine";
    case service_type::mesh_provisioning_service:
        return "mesh_provisioning_service";
    case service_type::mesh_proxy_service:
        return "mesh_proxy_service";
    case service_type::reconnection_configuration:
        return "reconnection_configuration";
    }
    return "service_type undefined";
}

char const* to_string(ble::gatt::characteristic_type characteristic_type)
{
    switch (characteristic_type)
    {
    case characteristic_type::device_name:
        return "device_name";
    case characteristic_type::appearance:
        return "appearance";
    case characteristic_type::peripheral_privacy_flag:
        return "peripheral_privacy_flag";
    case characteristic_type::reconnection_address:
        return "reconnection_address";
    case characteristic_type::ppcp:
        return "ppcp";
    case characteristic_type::service_changed:
        return "service_changed";
    case characteristic_type::alert_level:
        return "alert_level";
    case characteristic_type::tx_power_level:
        return "tx_power_level";
    case characteristic_type::date_time:
        return "date_time";
    case characteristic_type::day_of_week:
        return "day_of_week";
    case characteristic_type::day_date_time:
        return "day_date_time";
    case characteristic_type::exact_time_100:
        return "exact_time_100";
    case characteristic_type::exact_time_256:
        return "exact_time_256";
    case characteristic_type::dst_offset:
        return "dst_offset";
    case characteristic_type::time_zone:
        return "time_zone";
    case characteristic_type::local_time_information:
        return "local_time_information";
    case characteristic_type::secondary_time_zone:
        return "secondary_time_zone";
    case characteristic_type::time_with_dst:
        return "time_with_dst";
    case characteristic_type::time_accuracy:
        return "time_accuracy";
    case characteristic_type::time_source:
        return "time_source";
    case characteristic_type::reference_time_information:
        return "reference_time_information";
    case characteristic_type::time_broadcast:
        return "time_broadcast";
    case characteristic_type::time_update_control_point:
        return "time_update_control_point";
    case characteristic_type::time_update_state:
        return "time_update_state";
    case characteristic_type::glucose_measurement:
        return "glucose_measurement";
    case characteristic_type::battery_level:
        return "battery_level";
    case characteristic_type::battery_power_state:
        return "battery_power_state";
    case characteristic_type::battery_level_state:
        return "battery_level_state";
    case characteristic_type::temperature_measurement:
        return "temperature_measurement";
    case characteristic_type::temperature_type:
        return "temperature_type";
    case characteristic_type::intermediate_temperature:
        return "intermediate_temperature";
    case characteristic_type::temperature_celsius:
        return "temperature_celsius";
    case characteristic_type::temperature_fahrenheit:
        return "temperature_fahrenheit";
    case characteristic_type::measurement_interval:
        return "measurement_interval";
    case characteristic_type::boot_keyboard_input_report:
        return "boot_keyboard_input_report";
    case characteristic_type::system_id:
        return "system_id";
    case characteristic_type::model_number_string:
        return "model_number_string";
    case characteristic_type::serial_number_string:
        return "serial_number_string";
    case characteristic_type::firmware_revision_string:
        return "firmware_revision_string";
    case characteristic_type::hardware_revision_string:
        return "hardware_revision_string";
    case characteristic_type::software_revision_string:
        return "software_revision_string";
    case characteristic_type::manufacturer_name_string:
        return "manufacturer_name_string";
    case characteristic_type::ieee_11073_20601_regulatory_cert_list:
        return "ieee_11073_20601_regulatory_cert_list";
    case characteristic_type::current_time:
        return "current_time";
    case characteristic_type::magnetic_declination:
        return "magnetic_declination";
    case characteristic_type::position_2d:
        return "position_2d";
    case characteristic_type::position_3d:
        return "position_3d";
    case characteristic_type::scan_refresh:
        return "scan_refresh";
    case characteristic_type::boot_keyboard_output_report:
        return "boot_keyboard_output_report";
    case characteristic_type::boot_mouse_input_report:
        return "boot_mouse_input_report";
    case characteristic_type::glucose_measurement_context:
        return "glucose_measurement_context";
    case characteristic_type::blood_pressure_measurement:
        return "blood_pressure_measurement";
    case characteristic_type::intermediate_cuff_pressure:
        return "intermediate_cuff_pressure";
    case characteristic_type::heart_rate_measurement:
        return "heart_rate_measurement";
    case characteristic_type::body_sensor_location:
        return "body_sensor_location";
    case characteristic_type::heart_rate_control_point:
        return "heart_rate_control_point";
    case characteristic_type::removable:
        return "removable";
    case characteristic_type::service_required:
        return "service_required";
    case characteristic_type::scientific_temperature_celsius:
        return "scientific_temperature_celsius";
    case characteristic_type::string:
        return "string";
    case characteristic_type::network_availability:
        return "network_availability";
    case characteristic_type::alert_status:
        return "alert_status";
    case characteristic_type::ringer_control_point:
        return "ringer_control_point";
    case characteristic_type::ringer_setting:
        return "ringer_setting";
    case characteristic_type::alert_category_id_bit_mask:
        return "alert_category_id_bit_mask";
    case characteristic_type::alert_category_id:
        return "alert_category_id";
    case characteristic_type::alert_notification_control_point:
        return "alert_notification_control_point";
    case characteristic_type::unread_alert_status:
        return "unread_alert_status";
    case characteristic_type::new_alert:
        return "new_alert";
    case characteristic_type::supported_new_alert_category:
        return "supported_new_alert_category";
    case characteristic_type::supported_unread_alert_category:
        return "supported_unread_alert_category";
    case characteristic_type::blood_pressure_feature:
        return "blood_pressure_feature";
    case characteristic_type::hid_information:
        return "hid_information";
    case characteristic_type::report_map:
        return "report_map";
    case characteristic_type::hid_control_point:
        return "hid_control_point";
    case characteristic_type::report:
        return "report";
    case characteristic_type::protocol_mode:
        return "protocol_mode";
    case characteristic_type::scan_interval_window:
        return "scan_interval_window";
    case characteristic_type::pnp_id:
        return "pnp_id";
    case characteristic_type::glucose_feature:
        return "glucose_feature";
    case characteristic_type::record_access_control_point:
        return "record_access_control_point";
    case characteristic_type::rsc_measurement:
        return "rsc_measurement";
    case characteristic_type::rsc_feature:
        return "rsc_feature";
    case characteristic_type::sc_control_point:
        return "sc_control_point";
    case characteristic_type::digital:
        return "digital";
    case characteristic_type::digital_output:
        return "digital_output";
    case characteristic_type::analog:
        return "analog";
    case characteristic_type::analog_output:
        return "analog_output";
    case characteristic_type::aggregate:
        return "aggregate";
    case characteristic_type::csc_measurement:
        return "csc_measurement";
    case characteristic_type::csc_feature:
        return "csc_feature";
    case characteristic_type::sensor_location:
        return "sensor_location";
    case characteristic_type::plx_spot_check_measurement:
        return "plx_spot_check_measurement";
    case characteristic_type::plx_continuous_measurement_characteristic:
        return "plx_continuous_measurement_characteristic";
    case characteristic_type::plx_features:
        return "plx_features";
    case characteristic_type::pulse_oximetry_control_point:
        return "pulse_oximetry_control_point";
    case characteristic_type::cycling_power_measurement:
        return "cycling_power_measurement";
    case characteristic_type::cycling_power_vector:
        return "cycling_power_vector";
    case characteristic_type::cycling_power_feature:
        return "cycling_power_feature";
    case characteristic_type::cycling_power_control_point:
        return "cycling_power_control_point";
    case characteristic_type::location_and_speed_characteristic:
        return "location_and_speed_characteristic";
    case characteristic_type::navigation:
        return "navigation";
    case characteristic_type::position_quality:
        return "position_quality";
    case characteristic_type::ln_feature:
        return "ln_feature";
    case characteristic_type::ln_control_point:
        return "ln_control_point";
    case characteristic_type::elevation:
        return "elevation";
    case characteristic_type::pressure:
        return "pressure";
    case characteristic_type::temperature:
        return "temperature";
    case characteristic_type::humidity:
        return "humidity";
    case characteristic_type::true_wind_speed:
        return "true_wind_speed";
    case characteristic_type::true_wind_direction:
        return "true_wind_direction";
    case characteristic_type::apparent_wind_speed:
        return "apparent_wind_speed";
    case characteristic_type::apparent_wind_direction:
        return "apparent_wind_direction";
    case characteristic_type::gust_factor:
        return "gust_factor";
    case characteristic_type::pollen_concentration:
        return "pollen_concentration";
    case characteristic_type::uv_index:
        return "uv_index";
    case characteristic_type::irradiance:
        return "irradiance";
    case characteristic_type::rainfall:
        return "rainfall";
    case characteristic_type::wind_chill:
        return "wind_chill";
    case characteristic_type::heat_index:
        return "heat_index";
    case characteristic_type::dew_point:
        return "dew_point";
    case characteristic_type::descriptor_value_changed:
        return "descriptor_value_changed";
    case characteristic_type::aerobic_heart_rate_lower_limit:
        return "aerobic_heart_rate_lower_limit";
    case characteristic_type::aerobic_threshold:
        return "aerobic_threshold";
    case characteristic_type::age:
        return "age";
    case characteristic_type::anaerobic_heart_rate_lower_limit:
        return "anaerobic_heart_rate_lower_limit";
    case characteristic_type::anaerobic_heart_rate_upper_limit:
        return "anaerobic_heart_rate_upper_limit";
    case characteristic_type::anaerobic_threshold:
        return "anaerobic_threshold";
    case characteristic_type::aerobic_heart_rate_upper_limit:
        return "aerobic_heart_rate_upper_limit";
    case characteristic_type::date_of_birth:
        return "date_of_birth";
    case characteristic_type::date_of_threshold_assessment:
        return "date_of_threshold_assessment";
    case characteristic_type::email_address:
        return "email_address";
    case characteristic_type::fat_burn_heart_rate_lower_limit:
        return "fat_burn_heart_rate_lower_limit";
    case characteristic_type::fat_burn_heart_rate_upper_limit:
        return "fat_burn_heart_rate_upper_limit";
    case characteristic_type::first_name:
        return "first_name";
    case characteristic_type::five_zone_heart_rate_limits:
        return "five_zone_heart_rate_limits";
    case characteristic_type::gender:
        return "gender";
    case characteristic_type::heart_rate_max:
        return "heart_rate_max";
    case characteristic_type::height:
        return "height";
    case characteristic_type::hip_circumference:
        return "hip_circumference";
    case characteristic_type::last_name:
        return "last_name";
    case characteristic_type::maximum_recommended_heart_rate:
        return "maximum_recommended_heart_rate";
    case characteristic_type::resting_heart_rate:
        return "resting_heart_rate";
    case characteristic_type::sport_type_aerobic_and_anaerobic_thresholds:
        return "sport_type_aerobic_and_anaerobic_thresholds";
    case characteristic_type::three_zone_heart_rate_limits:
        return "three_zone_heart_rate_limits";
    case characteristic_type::two_zone_heart_rate_limit:
        return "two_zone_heart_rate_limit";
    case characteristic_type::vo2_max:
        return "vo2_max";
    case characteristic_type::waist_circumference:
        return "waist_circumference";
    case characteristic_type::weight:
        return "weight";
    case characteristic_type::database_change_increment:
        return "database_change_increment";
    case characteristic_type::user_index:
        return "user_index";
    case characteristic_type::body_composition_feature:
        return "body_composition_feature";
    case characteristic_type::body_composition_measurement:
        return "body_composition_measurement";
    case characteristic_type::weight_measurement:
        return "weight_measurement";
    case characteristic_type::weight_scale_feature:
        return "weight_scale_feature";
    case characteristic_type::user_control_point:
        return "user_control_point";
    case characteristic_type::magnetic_flux_density_2d:
        return "magnetic_flux_density_2d";
    case characteristic_type::magnetic_flux_density_3d:
        return "magnetic_flux_density_3d";
    case characteristic_type::language:
        return "language";
    case characteristic_type::barometric_pressure_trend:
        return "barometric_pressure_trend";
    case characteristic_type::bond_management_control_point:
        return "bond_management_control_point";
    case characteristic_type::bond_management_features:
        return "bond_management_features";
    case characteristic_type::central_address_resolution:
        return "central_address_resolution";
    case characteristic_type::cgm_measurement:
        return "cgm_measurement";
    case characteristic_type::cgm_feature:
        return "cgm_feature";
    case characteristic_type::cgm_status:
        return "cgm_status";
    case characteristic_type::cgm_session_start_time:
        return "cgm_session_start_time";
    case characteristic_type::cgm_session_run_time:
        return "cgm_session_run_time";
    case characteristic_type::cgm_specific_ops_control_point:
        return "cgm_specific_ops_control_point";
    case characteristic_type::indoor_positioning_configuration:
        return "indoor_positioning_configuration";
    case characteristic_type::latitude:
        return "latitude";
    case characteristic_type::longitude:
        return "longitude";
    case characteristic_type::local_north_coordinate:
        return "local_north_coordinate";
    case characteristic_type::local_east_coordinate:
        return "local_east_coordinate";
    case characteristic_type::floor_number:
        return "floor_number";
    case characteristic_type::altitude:
        return "altitude";
    case characteristic_type::uncertainty:
        return "uncertainty";
    case characteristic_type::location_name:
        return "location_name";
    case characteristic_type::uri:
        return "uri";
    case characteristic_type::http_headers:
        return "http_headers";
    case characteristic_type::http_status_code:
        return "http_status_code";
    case characteristic_type::http_entity_body:
        return "http_entity_body";
    case characteristic_type::http_control_point:
        return "http_control_point";
    case characteristic_type::https_security:
        return "https_security";
    case characteristic_type::tds_control_point:
        return "tds_control_point";
    case characteristic_type::ots_feature:
        return "ots_feature";
    case characteristic_type::object_name:
        return "object_name";
    case characteristic_type::object_type:
        return "object_type";
    case characteristic_type::object_size:
        return "object_size";
    case characteristic_type::object_first_created:
        return "object_first_created";
    case characteristic_type::object_last_modified:
        return "object_last_modified";
    case characteristic_type::object_id:
        return "object_id";
    case characteristic_type::object_properties:
        return "object_properties";
    case characteristic_type::object_action_control_point:
        return "object_action_control_point";
    case characteristic_type::object_list_control_point:
        return "object_list_control_point";
    case characteristic_type::object_list_filter:
        return "object_list_filter";
    case characteristic_type::object_changed:
        return "object_changed";
    case characteristic_type::resolvable_private_address_only:
        return "resolvable_private_address_only";
    case characteristic_type::fitness_machine_feature:
        return "fitness_machine_feature";
    case characteristic_type::treadmill_data:
        return "treadmill_data";
    case characteristic_type::cross_trainer_data:
        return "cross_trainer_data";
    case characteristic_type::step_climber_data:
        return "step_climber_data";
    case characteristic_type::stair_climber_data:
        return "stair_climber_data";
    case characteristic_type::rower_data:
        return "rower_data";
    case characteristic_type::indoor_bike_data:
        return "indoor_bike_data";
    case characteristic_type::training_status:
        return "training_status";
    case characteristic_type::supported_speed_range:
        return "supported_speed_range";
    case characteristic_type::supported_inclination_range:
        return "supported_inclination_range";
    case characteristic_type::supported_resistance_level_range:
        return "supported_resistance_level_range";
    case characteristic_type::supported_heart_rate_range:
        return "supported_heart_rate_range";
    case characteristic_type::supported_power_range:
        return "supported_power_range";
    case characteristic_type::fitness_machine_control_point:
        return "fitness_machine_control_point";
    case characteristic_type::fitness_machine_status:
        return "fitness_machine_status";
    case characteristic_type::rc_feature:
        return "rc_feature";
    case characteristic_type::rc_settings:
        return "rc_settings";
    case characteristic_type::reconnection_configuration_control_point:
        return "reconnection_configuration_control_point";
    }
    return "characteristic_type undefined";
};

char const* to_string(ble::gatt::units_type units_type)
{
    switch (units_type)
    {
    case units_type::unitless:
        return "unitless";
    case units_type::metre:
        return "metre";
    case units_type::kilogram:
        return "kilogram";
    case units_type::second:
        return "second";
    case units_type::ampere:
        return "ampere";
    case units_type::kelvin:
        return "kelvin";
    case units_type::mole:
        return "mole";
    case units_type::candela:
        return "candela";
    case units_type::square_metres:
        return "square_metres";
    case units_type::cubic_metres:
        return "cubic_metres";
    case units_type::metres_per_second:
        return "metres_per_second";
    case units_type::metres_per_second_squared:
        return "metres_per_second_squared";
    case units_type::reciprocal_metre:
        return "reciprocal_metre";
    case units_type::kilogram_per_cubic_metre:
        return "kilogram_per_cubic_metre";
    case units_type::kilogram_per_square_metre:
        return "kilogram_per_square_metre";
    case units_type::cubic_metre_per_kilogram:
        return "cubic_metre_per_kilogram";
    case units_type::ampere_per_square_metre:
        return "ampere_per_square_metre";
    case units_type::ampere_per_metre:
        return "ampere_per_metre";
    case units_type::mole_per_cubic_metre:
        return "mole_per_cubic_metre";
    case units_type::kilogram_per_cubic_metre_conentration:
        return "kilogram_per_cubic_metre_conentration";
    case units_type::candela_per_square_metre:
        return "candela_per_square_metre";
    case units_type::refractive_index:
        return "refractive_index";
    case units_type::relative_permeability:
        return "relative_permeability";
    case units_type::radian:
        return "radian";
    case units_type::steradian:
        return "steradian";
    case units_type::hertz:
        return "hertz";
    case units_type::newton:
        return "newton";
    case units_type::pascal:
        return "pascal";
    case units_type::joule:
        return "joule";
    case units_type::watt:
        return "watt";
    case units_type::coulomb:
        return "coulomb";
    case units_type::volt:
        return "volt";
    case units_type::farad:
        return "farad";
    case units_type::ohm:
        return "ohm";
    case units_type::siemens:
        return "siemens";
    case units_type::weber:
        return "weber";
    case units_type::tesla:
        return "tesla";
    case units_type::henry:
        return "henry";
    case units_type::degree_Celsius:
        return "degree_Celsius";
    case units_type::lumen:
        return "lumen";
    case units_type::lux:
        return "lux";
    case units_type::becquerel:
        return "becquerel";
    case units_type::gray:
        return "gray";
    case units_type::sievert:
        return "sievert";
    case units_type::katal:
        return "katal";
    case units_type::pascal_second:
        return "pascal_second";
    case units_type::newton_metre:
        return "newton_metre";
    case units_type::newton_per_metre:
        return "newton_per_metre";
    case units_type::radian_per_second:
        return "radian_per_second";
    case units_type::radian_per_second_squared:
        return "radian_per_second_squared";
    case units_type::watt_per_square_metre_heat_flux:
        return "watt_per_square_metre_heat_flux";
    case units_type::joule_per_kelvin:
        return "joule_per_kelvin";
    case units_type::joule_per_kilogram_kelvin:
        return "joule_per_kilogram_kelvin";
    case units_type::joule_per_kilogram:
        return "joule_per_kilogram";
    case units_type::watt_per_metre_kelvin:
        return "watt_per_metre_kelvin";
    case units_type::joule_per_cubic_metre:
        return "joule_per_cubic_metre";
    case units_type::volt_per_metre:
        return "volt_per_metre";
    case units_type::coulomb_per_cubic_metre:
        return "coulomb_per_cubic_metre";
    case units_type::coulomb_per_square_metre:
        return "coulomb_per_square_metre";
    case units_type::coulomb_per_square_metre_electic_flux:
        return "coulomb_per_square_metre_electic_flux";
    case units_type::farad_per_metre:
        return "farad_per_metre";
    case units_type::henry_per_metre:
        return "henry_per_metre";
    case units_type::joule_per_mole:
        return "joule_per_mole";
    case units_type::joule_per_mole_kelvin:
        return "joule_per_mole_kelvin";
    case units_type::coulomb_per_kilogram:
        return "coulomb_per_kilogram";
    case units_type::gray_per_second:
        return "gray_per_second";
    case units_type::watt_per_steradian:
        return "watt_per_steradian";
    case units_type::watt_per_square_metre_steradian:
        return "watt_per_square_metre_steradian";
    case units_type::katal_per_cubic_metre:
        return "katal_per_cubic_metre";
    case units_type::minute:
        return "minute";
    case units_type::hour:
        return "hour";
    case units_type::day:
        return "day";
    case units_type::degree:
        return "degree";
    case units_type::plane_angle_minute:
        return "plane_angle_minute";
    case units_type::plane_angle_second:
        return "plane_angle_second";
    case units_type::hectare:
        return "hectare";
    case units_type::litre:
        return "litre";
    case units_type::tonne:
        return "tonne";
    case units_type::bar:
        return "bar";
    case units_type::millimetre_of_mercury:
        return "millimetre_of_mercury";
    case units_type::ngstrm:
        return "ngstrm";
    case units_type::nautical_mile:
        return "nautical_mile";
    case units_type::barn:
        return "barn";
    case units_type::knot:
        return "knot";
    case units_type::neper:
        return "neper";
    case units_type::bel:
        return "bel";
    case units_type::yard:
        return "yard";
    case units_type::parsec:
        return "parsec";
    case units_type::inch:
        return "inch";
    case units_type::foot:
        return "foot";
    case units_type::mile:
        return "mile";
    case units_type::pound_force_per_square_inch:
        return "pound_force_per_square_inch";
    case units_type::kilometre_per_hour:
        return "kilometre_per_hour";
    case units_type::mile_per_hour:
        return "mile_per_hour";
    case units_type::revolution_per_minute:
        return "revolution_per_minute";
    case units_type::gram_calorie:
        return "gram_calorie";
    case units_type::kilogram_calorie:
        return "kilogram_calorie";
    case units_type::kilowatt_hour:
        return "kilowatt_hour";
    case units_type::degree_Fahrenheit:
        return "degree_Fahrenheit";
    case units_type::percentage:
        return "percentage";
    case units_type::per_mille:
        return "per_mille";
    case units_type::beats_per_minute:
        return "beats_per_minute";
    case units_type::ampere_hours:
        return "ampere_hours";
    case units_type::milligram_per_decilitre:
        return "milligram_per_decilitre";
    case units_type::millimole_per_litre:
        return "millimole_per_litre";
    case units_type::year:
        return "year";
    case units_type::month:
        return "month";
    case units_type::count_per_cubic_metre:
        return "count_per_cubic_metre";
    case units_type::watt_per_square_metre_irradiance:
        return "watt_per_square_metre_irradiance";
    case units_type::per_kilogram_per_minute:
        return "per_kilogram_per_minute";
    case units_type::pound:
        return "pound";
    case units_type::metabolic_equivalent:
        return "metabolic_equivalent";
    case units_type::steps_per_minute:
        return "steps_per_minute";
    case units_type::strokes_per_minute:
        return "strokes_per_minute";
    case units_type::kilometre_per_minute:
        return "kilometre_per_minute";
    case units_type::lumen_per_watt:
        return "lumen_per_watt";
    case units_type::lumen_hour:
        return "lumen_hour";
    case units_type::lux_hour:
        return "lux_hour";
    case units_type::gram_per_second:
        return "gram_per_second";
    case units_type::litre_per_second:
        return "litre_per_second";
    }
    return "units_type undefined";
};

} // namespace gatt
} // namespace ble
